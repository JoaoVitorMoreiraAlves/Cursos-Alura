Para criar os arquivos do django devemos garantir que cada projeta tenha suas próprias dependencias e para isso utilizamos o comando (virtualenv venv)

para iniciarlizarmos a proteção utlizandos o nome-do-arquivo/Scripts/Activate

além disso também é ideal utilizarmos o pip freeze para vermos quais os requerimentos e depois o pip freeze > requirements.txt para baixar um arquivo txt com os requerimentos

A seguir temos alguns exemplos de ambientes virtuais e ferramentas relacionadas mais utilizadas no mercado:

    venv: É o ambiente virtual “padrão” do Python e sua grande vantagem é já vir instalado como um módulo na linguagem a partir da versão 3.3. Se trata de um subset (parte menor) da ferramenta virtualenv.

    Virtualenv: É uma ferramenta feita especificamente para a criação de ambientes virtuais e precede a criação da venv, sendo um superset (parte maior) dela. Algumas de sua principais vantagens sobre a venv são:

        Maior velocidade, graças ao método app-data seed;

        Pode criar ambientes virtuais para versões arbitrárias do Python instaladas na máquina;

        Pode ser atualizado utilizando a ferramenta pip;

        Possui uma Programmatic API, capaz de descrever um ambiente virtual sem criá-lo.

    Conda: É uma alternativa não apenas às ferramentas de ambiente virtuais já citadas, mas ao instalador de pacotes pip também. Possui um escopo mais centrado na área de ciência de dados e possui a capacidade de instalar pacotes fora do ecossistema do Python.

    Virtualenvwrapper: É uma extensão do projeto Virtualenv que torna a criação, deleção e gerenciamento geral dos ambientes virtuais mais fácil. Uma grande vantagem de sua utilização é a organização de todos os ambientes virtuais utilizados em um só lugar, além de facilitar os comandos de CLI.

    Poetry: É uma ferramenta para gerenciamento de dependências e pacotes do Python. Através do Poetry é possível declarar quais pacotes um projeto necessita para funcionar, de forma parecida ao requirements.txt, porém, de forma determinística.


Confira o andamento do seu projeto de acordo com o que foi instruído:

1) Estabeleça um ambiente virtual dentro do diretório do projeto

python -m virtualenv venv

2) Ative o ambiente virtual

venv/Scripts/Activate

3) Instale o Django

pip install django

4) Crie o projeto Django

django-admin startproject setup . (O ponto final é para não criar duas pastas do tipo setup)

5) Rode o servidor pela primeira vez

python manage.py runserver